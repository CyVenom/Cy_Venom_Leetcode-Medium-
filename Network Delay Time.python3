import heapq
from collections import defaultdict

class Solution:
    def networkDelayTime(self, times: list[list[int]], n: int, k: int) -> int:
        graph = defaultdict(list)
        for u, v, w in times:
            graph[u].append((w, v))
        
        min_heap = [(0, k)]
        visited = set()
        dist = {i: float('inf') for i in range(1, n + 1)}
        dist[k] = 0
        
        while min_heap:
            time, node = heapq.heappop(min_heap)
            if node in visited:
                continue
            visited.add(node)
            
            for weight, neighbor in graph[node]:
                if time + weight < dist[neighbor]:
                    dist[neighbor] = time + weight
                    heapq.heappush(min_heap, (dist[neighbor], neighbor))
        
        max_time = max(dist.values())
        return max_time if len(visited) == n else -1
