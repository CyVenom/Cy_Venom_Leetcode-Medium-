from collections import Counter
import heapq

class Solution:
    def repeatLimitedString(self, s: str, repeatLimit: int) -> str:
        freq = Counter(s)
        max_heap = [(-ord(char), count) for char, count in freq.items()]
        heapq.heapify(max_heap)

        result = []
        
        while max_heap:
            char1, count1 = heapq.heappop(max_heap)
            char1 = chr(-char1)

            use_count = min(count1, repeatLimit)
            result.extend([char1] * use_count)

            count1 -= use_count

            # Check if there are still characters left after using repeatLimit
            if count1 > 0:
                if not max_heap:
                    break
                
                # Get the next highest character to avoid exceeding repeatLimit
                char2, count2 = heapq.heappop(max_heap)
                char2 = chr(-char2)
                
                # Add one occurrence of the next character to break the repetition
                result.append(char2)
                
                # Push the next character back with one less occurrence
                if count2 - 1 > 0:
                    heapq.heappush(max_heap, (-ord(char2), count2 - 1))
                
                # Push the previous character back with the remaining count
                heapq.heappush(max_heap, (-ord(char1), count1))
        
        return ''.join(result)

# Example usage
solution = Solution()
print(solution.repeatLimitedString("cczazcc", 3))  # Output: "zzcccac"
print(solution.repeatLimitedString("aababab", 2))  # Output: "bbabaa"
