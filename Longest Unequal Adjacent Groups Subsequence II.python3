class Solution:
    def getWordsInLongestSubsequence(self, words: list[str], groups: list[int]) -> list[str]:
        n = len(words)
        prev_index = [0] * n
        hash_map = {}
        max_len = 0
        start_index = 0

        for i in range(n - 1, -1, -1):
            word = words[i]
            group = groups[i]

            base_hash = sum((ord(c) & 31) << (j * 6) for j, c in enumerate(word))
            best_len = 0

            for j in range(len(word)):
                mutated_hash = base_hash | (31 << (j * 6))
                max1, idx1, max2, idx2 = hash_map.get(mutated_hash, (0, 0, 0, 0))

                if groups[idx1] != group:
                    if max1 > best_len:
                        best_len = max1
                        prev_index[i] = idx1
                elif max2 > best_len:
                    best_len = max2
                    prev_index[i] = idx2

            best_len += 1
            if best_len > max_len:
                max_len = best_len
                start_index = i

            for j in range(len(word)):
                mutated_hash = base_hash | (31 << (j * 6))
                max1, idx1, max2, idx2 = hash_map.get(mutated_hash, (0, 0, 0, 0))

                if best_len > max1:
                    if groups[idx1] != group:
                        max2, idx2 = max1, idx1
                    max1, idx1 = best_len, i
                elif best_len > max2 and groups[idx1] != group:
                    max2, idx2 = best_len, i

                hash_map[mutated_hash] = (max1, idx1, max2, idx2)

        result = []
        index = start_index
        for _ in range(max_len):
            result.append(words[index])
            index = prev_index[index]

        return result
