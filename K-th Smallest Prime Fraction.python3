import heapq

class Solution:
    def kthSmallestPrimeFraction(self, arr: list[int], k: int) -> list[int]:
        n = len(arr)
        heap = []

        # Initialize heap with fractions: arr[0] / arr[j] for all j > 0
        for j in range(1, n):
            heapq.heappush(heap, (arr[0] / arr[j], 0, j))

        # Extract k-1 smallest fractions
        for _ in range(k - 1):
            val, i, j = heapq.heappop(heap)
            if i + 1 < j:
                # push next fraction: arr[i+1] / arr[j]
                heapq.heappush(heap, (arr[i + 1] / arr[j], i + 1, j))

        _, i, j = heapq.heappop(heap)
        return [arr[i], arr[j]]
