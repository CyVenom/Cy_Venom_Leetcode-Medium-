from collections import deque

class Solution:
    def openLock(self, deadends: list[str], target: str) -> int:
        def neighbors(state):
            for i in range(4):
                x = int(state[i])
                for d in (-1, 1):
                    y = (x + d) % 10
                    yield state[:i] + str(y) + state[i+1:]

        dead_set = set(deadends)
        if "0000" in dead_set:
            return -1
        
        queue = deque([("0000", 0)])
        visited = {"0000"}

        while queue:
            state, steps = queue.popleft()
            if state == target:
                return steps
            
            for next_state in neighbors(state):
                if next_state not in visited and next_state not in dead_set:
                    visited.add(next_state)
                    queue.append((next_state, steps + 1))
        
        return -1
